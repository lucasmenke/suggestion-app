@page "/Details/{Id}"
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject IStatusData statusData
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Suggestion Details</h1>

<div class="row justify-content-center detail-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        @if (suggestion != null)
        {
            <div class="row suggestion-detail-row">
                <div class="col-11 suggestion-detail">
                    <div>
                        <div class="@GetVoteClass()" @onclick="VoteUp">
                            <div class="text-uppercase">@GetUpvoteTopText()</div>
                            <span class="oi oi-caret-top detail-upvote"></span>
                            <div class="text-uppercase">@GetUpvoteBottomText()</div>
                        </div>                   
                        <div class="suggestion-detail-date">
                            <div>@suggestion.DateCreated.ToString("dd.MM.yyyy")</div>
                        </div>
                    </div>
                    <div class="suggestion-detail-text">
                        <div class="fw-bold mb-2 suggestion-detail-suggestion">@suggestion.Suggestion</div>
                        <div class="mb-2 suggestion-detail-author">@suggestion.Author.DisplayName</div>
                        <div class="mb-2">@suggestion.Description</div>
                        <div class="suggestion-entry-text-category">@suggestion.Category.CategoryName</div>
                    </div>
                </div>
                <div class="col-1 close-button-section">
                    <button class="btn btn-close" @onclick="ClosePage"></button>
                </div>
            </div>
        }
    </div>
</div>

@if (suggestion?.SuggestionStatus != null)
{
    <div class="row justify-content-center detail-form">
        <div class="col-xl-8 col-lg-10 suggestion-results form-layout">
            <div class="@GetStatusClass()"></div>
            <div class="suggestion-detail-status-section">
                <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-suggestion">
                    @suggestion.SuggestionStatus.StatusName
                </div>
                <div class="suggestion-detail-owner-notes">
                    @((MarkupString)suggestion.OwnerNotes)
                </div>
            </div>
        </div>
    </div>
}

@if (suggestion != null)
{
    <AuthorizeView Policy="Admin">
        <div class="row justify-content-center detail-form">
            <div class="col-xl-8 col-lg-10 form-layout admin-details"> 
                <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-suggestion">
                    Set Status
                </div>
                @if (string.IsNullOrWhiteSpace(settingStatus))
                {
                    <div class="admin-set-statuses">
                        <button class="btn suggestion-entry-text-category btn-archive btn-status-completed" @onclick="@(() => settingStatus = "completed")">completed</button>
                        <button class="btn suggestion-entry-text-category btn-archive btn-status-watching" @onclick="@(() => settingStatus = "watching")">watching</button>
                        <button class="btn suggestion-entry-text-category btn-archive btn-status-upcoming" @onclick="@(() => settingStatus = "upcoming")">upcoming</button>
                        <button class="btn suggestion-entry-text-category btn-archive btn-status-dismissed" @onclick="@(() => settingStatus = "dismissed")">dismissed</button>
                    </div>
                }
                else if (settingStatus == "completed")
                {
                    <div>
                        <input @bind="urlText" class="form-control rounded-control" type="text" placeholder="Url" aria-label="Content Url" />
                    </div>
                    <div class="suggestion-entry-bottom">
                        <button class="btn btn-archive btn-archive-confirm" @onclick="CompleteSetStatus">confirm</button>
                        <button class="btn btn-archive btn-archive-reject" @onclick="(() => settingStatus = null)">cancel</button>
                    </div>
                }
                else
                {
                    <div class="suggestion-entry-bottom color-darkgreen">
                        <button class="btn btn-archive btn-archive-confirm" @onclick="CompleteSetStatus">confirm</button>
                        <button class="btn btn-archive btn-archive-reject" @onclick="(() => settingStatus = null)">cancel</button>
                    </div>
                }
            </div>
        </div>
    </AuthorizeView>
}

@code {
    // Parameter passed by the url {Id}
    [Parameter]
    public string Id { get; set; }

    private UserModel loggedInUser;
    private SuggestionModel suggestion;

    private List<StatusModel> statuses;
    private string settingStatus = "";
    private string urlText = "";

    protected async override Task OnInitializedAsync()
    {
        suggestion = await suggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        statuses = await statusData.GetAllStatuses();
    }

    private async Task CompleteSetStatus()
    {
        switch (settingStatus)
        {
            case "completed":
                if (string.IsNullOrWhiteSpace(urlText))
                {
                    return;
                }
                suggestion.SuggestionStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                suggestion.OwnerNotes = $"Here is our finished resource about it: <a class='color-darkgreen' href='{urlText}' target='_blank'>{urlText}</a>";
                break;
            case "watching":
                suggestion.SuggestionStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                suggestion.OwnerNotes = "The topic needs some more traction to be addressed.";
                break;
            case "upcoming":
                suggestion.SuggestionStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                suggestion.OwnerNotes = "We have a resource in our pipeline.";
                break;
            case "dismissed":
                suggestion.SuggestionStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                suggestion.OwnerNotes = "Your idea doesn't fit.";
                break;
        }

        settingStatus = null;
        await suggestionData.UpdateSuggestion(suggestion);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private string GetUpvoteTopText()
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";
            }
        }
    }

    private async Task VoteUp()
    {
        if (loggedInUser != null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                // Can't vote on own suggestion
                return;
            }
            // false means that the user already voted on the object & a hashset only contains unique values
            if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                // that means the user wants to remove their given vote
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);
        }
        else
        {
            // foreced load (true) ensures to go to external page
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetUpvoteBottomText()
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private string GetVoteClass()
    {
        if (suggestion.UserVotes == null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-detail-no-votes";
        }
        else if (suggestion.UserVotes.Contains(loggedInUser?.Id))
        {
            return "suggestion-detail-voted";
        }
        else
        {
            return "suggestion-detail-not-voted";
        }
    }

    private string GetStatusClass()
    {
        if (suggestion == null | suggestion.SuggestionStatus == null)
        {
            return "suggstion-detail-status-none";
        }

        string output = suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggstion-detail-status-completed",
            "Watching" => "suggstion-detail-status-watching",
            "Upcoming" => "suggstion-detail-status-upcoming",
            "Dismissed" => "suggstion-detail-status-dismissed",
            _ => "suggstion-detail-status-completed",
        };

        return output;
    }
}
